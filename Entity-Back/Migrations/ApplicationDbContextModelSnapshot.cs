// <auto-generated />
using System;
using Entity_Back.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entity_Back.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entity_Back.Citation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ScheduleHourId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("TimeBlock")
                        .HasColumnType("time");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleHourId");

                    b.HasIndex("UserId");

                    b.ToTable("Citation", "Medical");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Note = "Cita para revisión general",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ScheduleHourId = 1,
                            State = "Pendiente",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AppointmentDate = new DateTime(2025, 8, 23, 17, 34, 12, 220, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Note = "string",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ScheduleHourId = 4,
                            State = "Agendada",
                            TimeBlock = new TimeSpan(0, 8, 45, 0, 0),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Entity_Back.ConsultingRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("ConsultingRoom", "Hospital");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchId = 1,
                            Floor = 1,
                            IsDeleted = false,
                            Name = "Consultorio General",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomNumber = 101
                        },
                        new
                        {
                            Id = 2,
                            BranchId = 1,
                            Floor = 2,
                            IsDeleted = false,
                            Name = "Pediatría",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomNumber = 202
                        },
                        new
                        {
                            Id = 3,
                            BranchId = 2,
                            Floor = 3,
                            IsDeleted = false,
                            Name = "Dermatología",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomNumber = 303
                        });
                });

            modelBuilder.Entity("Entity_Back.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("EmailDoctor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Doctor", "Hospital");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            EmailDoctor = "doctor@gmail.com",
                            Image = "doctor1.jpg",
                            IsDeleted = false,
                            PersonId = 1,
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specialty = "Medicina General"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            Image = "doctor2.jpg",
                            IsDeleted = false,
                            PersonId = 2,
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specialty = "Pediatría"
                        },
                        new
                        {
                            Id = 3,
                            Active = false,
                            EmailDoctor = "docto2r@gmail.com",
                            Image = "doctor3.jpg",
                            IsDeleted = false,
                            PersonId = 1,
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specialty = "Dermatología"
                        });
                });

            modelBuilder.Entity("Entity_Back.Models.HospitalModel.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DocumentType", "Hospital");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Acronym = "CC",
                            IsDeleted = false,
                            Name = "Cédula Ciudadanía",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Acronym = "TI",
                            IsDeleted = false,
                            Name = "Tarjeta Identidad",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Acronym = "RC",
                            IsDeleted = false,
                            Name = "Registro Civil",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Acronym = "TE",
                            IsDeleted = false,
                            Name = "Tarjeta de Extranjería",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Acronym = "PP",
                            IsDeleted = false,
                            Name = "Pasaporte",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            Acronym = "PEP",
                            IsDeleted = false,
                            Name = "Permiso Especial de Permanencia",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Entity_Back.Models.HospitalModel.Eps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Eps", "Hospital");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Coosalud EPS‑S",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Nueva EPS",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Mutual SER",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Salud MÍA",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "Aliansalud EPS",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "Salud Total EPS S.A.",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = "EPS Sanitas",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            Name = "EPS Sura",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            IsDeleted = false,
                            Name = "Famisanar",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            IsDeleted = false,
                            Name = "Servicio Occidental de Salud – SOS",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            IsDeleted = false,
                            Name = "Comfenalco Valle",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            IsDeleted = false,
                            Name = "Compensar EPS",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            IsDeleted = false,
                            Name = "Empresas Públicas de Medellín – EPM",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            IsDeleted = false,
                            Name = "Fondo de Pasivo Social de Ferrocarriles Nacionales de Colombia",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            IsDeleted = false,
                            Name = "Cajacopi Atlántico",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16,
                            IsDeleted = false,
                            Name = "Capresoca",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 17,
                            IsDeleted = false,
                            Name = "Comfachocó",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 18,
                            IsDeleted = false,
                            Name = "Comfaoriente",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 19,
                            IsDeleted = false,
                            Name = "EPS Familiar de Colombia",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 21,
                            IsDeleted = false,
                            Name = "Emssanar E.S.S.",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 20,
                            IsDeleted = false,
                            Name = "Asmet Salud",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 22,
                            IsDeleted = false,
                            Name = "Capital Salud EPS‑S",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 23,
                            IsDeleted = false,
                            Name = "Savia Salud EPS",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 24,
                            IsDeleted = false,
                            Name = "Dusakawi EPSI",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 25,
                            IsDeleted = false,
                            Name = "Asociación Indígena del Cauca EPSI",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 26,
                            IsDeleted = false,
                            Name = "Anas Wayuu EPSI",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 27,
                            IsDeleted = false,
                            Name = "Mallamas EPSI",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 28,
                            IsDeleted = false,
                            Name = "Pijaos Salud EPSI",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Entity_Back.Models.HospitalModel.RelatedPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeRelation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("RelatedPerson");
                });

            modelBuilder.Entity("Entity_Back.Models.Infrastructure.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Branch", "ModelInfrastructure");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Cra 7 #12-34",
                            Email = "neiva@ips.com",
                            InstitutionId = 10,
                            IsDeleted = false,
                            Name = "Sucursal Neiva",
                            PhoneNumber = "3211112233",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Address = "Av Circunvalar #45",
                            Email = "pitalito@ips.com",
                            InstitutionId = 10,
                            IsDeleted = false,
                            Name = "Sucursal Pitalito",
                            PhoneNumber = "3224445566",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Entity_Back.Models.Infrastructure.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartamentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DepartamentId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("City", "ModelInfrastructure");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "Acevedo",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "Aipe",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "Algeciras",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "Altamira",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "Baraya",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "Campoalegre",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "Colombia",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "Elías",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "Garzón",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "Gigante",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "Guadalupe",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "Hobo",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "Íquira",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "Isnos",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "La Argentina",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "La Plata",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 17,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "Nátaga",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 18,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "Neiva",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 19,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "Oporapa",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 20,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "Paicol",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 21,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "Palermo",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 22,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "Palestina",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 23,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "Pital",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 24,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "Pitalito",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 25,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "Rivera",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 26,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "Saladoblanco",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 27,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "San Agustín",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 28,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "Santa María",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 29,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "Suaza",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 30,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "Tarqui",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 31,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "Tello",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 32,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "Teruel",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 33,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "Tesalia",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 34,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "Timaná",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 35,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "Villavieja",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 36,
                            DepartamentId = 1,
                            IsDeleted = false,
                            Name = "Yaguará",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Entity_Back.Models.Infrastructure.Departament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Departament", "ModelInfrastructure");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Huila",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Entity_Back.Models.Infrastructure.Institution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Institution", "ModelInfrastructure");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            CityId = 1,
                            Email = "info@saludhuila.com",
                            IsDeleted = false,
                            Name = "Salud Huila IPS",
                            Nit = "900123456-7",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            CityId = 2,
                            Email = "contacto@pitalitomedico.com",
                            IsDeleted = false,
                            Name = "Centro Médico Pitalito",
                            Nit = "900987654-3",
                            RegistrationDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Entity_Back.Models.Notification.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CitationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("StateNotification")
                        .HasColumnType("bit");

                    b.Property<string>("TypeNotification")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CitationId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Entity_Back.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiresAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RevokedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Entity_Back.Models.Security.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Rol", "ModelSecurity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Rol de administrador",
                            IsDeleted = false,
                            Name = "Admin",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Description = "Rol estándar",
                            IsDeleted = false,
                            Name = "Usuario",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Entity_Back.Models.SecurityModels.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Form");
                });

            modelBuilder.Entity("Entity_Back.Models.SecurityModels.FormModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Formmodule");
                });

            modelBuilder.Entity("Entity_Back.Models.SecurityModels.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Module");
                });

            modelBuilder.Entity("Entity_Back.Models.SecurityModels.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("Entity_Back.Models.SecurityModels.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateBorn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("EpsId")
                        .HasColumnType("int");

                    b.Property<string>("FullLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HealthRegime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("EpsId");

                    b.ToTable("Person", "ModelSecurity", t =>
                        {
                            t.HasCheckConstraint("CK_Person_Gender", "[Gender] IN ('Masculino', 'Femenino')");

                            t.HasCheckConstraint("CK_Person_HealthRegime", "[HealthRegime] IN ('Contributivo', 'Subsidiado', 'Excepcion')");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = false,
                            DateBorn = new DateTime(2006, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Document = "1084922863",
                            DocumentTypeId = 1,
                            EpsId = 1,
                            FullLastName = "Noscue",
                            FullName = "Mauricio",
                            Gender = "Masculino",
                            HealthRegime = "Contributivo",
                            IsDeleted = false,
                            PhoneNumber = "3133156032",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Active = false,
                            DateBorn = new DateTime(2006, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Document = "1084922863",
                            DocumentTypeId = 1,
                            EpsId = 1,
                            FullLastName = "Noscue",
                            FullName = "María isabel",
                            Gender = "Femenino",
                            HealthRegime = "Contributivo",
                            IsDeleted = false,
                            PhoneNumber = "3133156032",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Entity_Back.Models.SecurityModels.RolFormPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RolId");

                    b.ToTable("RolFormPermission");
                });

            modelBuilder.Entity("Entity_Back.Models.SecurityModels.RolUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RolId");

                    b.HasIndex("UserId");

                    b.ToTable("RolUser", "ModelSecurity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Entity_Back.Models.SecurityModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CodePassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordResetTokenExpiration")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RestrictionPoint")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasFilter("[PersonId] IS NOT NULL");

                    b.ToTable("User", "ModelSecurity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = false,
                            CodePassword = "no hay",
                            Email = "mauronoscue@gmail.com",
                            IsDeleted = false,
                            Password = "M1d!Citas2025",
                            PersonId = 1,
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RestrictionPoint = 3
                        },
                        new
                        {
                            Id = 2,
                            Active = false,
                            CodePassword = "no hay",
                            Email = "isaTovarp.18@gmail.com",
                            IsDeleted = false,
                            Password = "M2d!Citas2025",
                            PersonId = 2,
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RestrictionPoint = 3
                        });
                });

            modelBuilder.Entity("Entity_Back.ScheduleHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan?>("BreakEndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("BreakStartTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ProgramateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SheduleId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("SheduleId");

                    b.ToTable("ScheduleHour", "Medical");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndTime = new TimeSpan(0, 8, 30, 0, 0),
                            IsDeleted = false,
                            ProgramateDate = new DateTime(2024, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SheduleId = 1,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            EndTime = new TimeSpan(0, 9, 0, 0, 0),
                            IsDeleted = false,
                            ProgramateDate = new DateTime(2024, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SheduleId = 1,
                            StartTime = new TimeSpan(0, 8, 30, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            EndTime = new TimeSpan(0, 9, 30, 0, 0),
                            IsDeleted = false,
                            ProgramateDate = new DateTime(2024, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SheduleId = 2,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            BreakEndTime = new TimeSpan(0, 14, 0, 0, 0),
                            BreakStartTime = new TimeSpan(0, 12, 0, 0, 0),
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            ProgramateDate = new DateTime(2025, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SheduleId = 4,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("Entity_Back.Shedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConsultingRoomId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("NumberCitation")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SheduleId")
                        .HasColumnType("int");

                    b.Property<int>("TypeCitationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConsultingRoomId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("TypeCitationId");

                    b.ToTable("Shedule", "Medical");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConsultingRoomId = 1,
                            DoctorId = 1,
                            IsDeleted = false,
                            NumberCitation = 4,
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeCitationId = 1
                        },
                        new
                        {
                            Id = 2,
                            ConsultingRoomId = 2,
                            DoctorId = 2,
                            IsDeleted = false,
                            NumberCitation = 6,
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeCitationId = 2
                        },
                        new
                        {
                            Id = 3,
                            ConsultingRoomId = 3,
                            DoctorId = 3,
                            IsDeleted = false,
                            NumberCitation = 8,
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeCitationId = 3
                        },
                        new
                        {
                            Id = 4,
                            ConsultingRoomId = 3,
                            DoctorId = 3,
                            IsDeleted = false,
                            NumberCitation = 8,
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeCitationId = 4
                        });
                });

            modelBuilder.Entity("Entity_Back.TypeCitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TypeCitation", "Hospital");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Evaluación médica básica con revisión general del paciente.",
                            Icon = "general.png",
                            IsDeleted = false,
                            Name = "Consulta General",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Description = "Atención en salud bucal, limpieza, diagnósticos y tratamientos.",
                            Icon = "odontologia.png",
                            IsDeleted = false,
                            Name = "Odontología",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Description = "Citas para toma de muestras y análisis clínicos.",
                            Icon = "laboratorio.png",
                            IsDeleted = false,
                            Name = "Laboratorio Clínico",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Description = "Citas para toma de muestras y análisis clínicos.",
                            Icon = "CExterna.png",
                            IsDeleted = false,
                            Name = "Consulta Externa",
                            RegistrationDate = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Entity_Back.Citation", b =>
                {
                    b.HasOne("Entity_Back.ScheduleHour", "ScheduleHour")
                        .WithMany("Citations")
                        .HasForeignKey("ScheduleHourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity_Back.Models.SecurityModels.User", "User")
                        .WithMany("Citation")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ScheduleHour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity_Back.ConsultingRoom", b =>
                {
                    b.HasOne("Entity_Back.Models.Infrastructure.Branch", "Branch")
                        .WithMany("ConsultingRoom")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Entity_Back.Doctor", b =>
                {
                    b.HasOne("Entity_Back.Models.SecurityModels.Person", "Person")
                        .WithMany("Doctor")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Entity_Back.Models.HospitalModel.RelatedPerson", b =>
                {
                    b.HasOne("Entity_Back.Models.SecurityModels.Person", "Person")
                        .WithMany("RelatedPerson")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Entity_Back.Models.Infrastructure.Branch", b =>
                {
                    b.HasOne("Entity_Back.Models.Infrastructure.Institution", "Institution")
                        .WithMany("Branchs")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("Entity_Back.Models.Infrastructure.City", b =>
                {
                    b.HasOne("Entity_Back.Models.Infrastructure.Departament", "Departament")
                        .WithMany("Citys")
                        .HasForeignKey("DepartamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departament");
                });

            modelBuilder.Entity("Entity_Back.Models.Infrastructure.Institution", b =>
                {
                    b.HasOne("Entity_Back.Models.Infrastructure.City", "City")
                        .WithMany("Institutions")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Entity_Back.Models.Notification.Notification", b =>
                {
                    b.HasOne("Entity_Back.Citation", "citation")
                        .WithMany("Notification")
                        .HasForeignKey("CitationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("citation");
                });

            modelBuilder.Entity("Entity_Back.Models.RefreshToken", b =>
                {
                    b.HasOne("Entity_Back.Models.SecurityModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity_Back.Models.SecurityModels.FormModule", b =>
                {
                    b.HasOne("Entity_Back.Models.SecurityModels.Form", "Form")
                        .WithMany("FormModule")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity_Back.Models.SecurityModels.Module", "Module")
                        .WithMany("FormModule")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Entity_Back.Models.SecurityModels.Person", b =>
                {
                    b.HasOne("Entity_Back.Models.HospitalModel.DocumentType", "DocumentType")
                        .WithMany("Person")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity_Back.Models.HospitalModel.Eps", "Eps")
                        .WithMany("Person")
                        .HasForeignKey("EpsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentType");

                    b.Navigation("Eps");
                });

            modelBuilder.Entity("Entity_Back.Models.SecurityModels.RolFormPermission", b =>
                {
                    b.HasOne("Entity_Back.Models.SecurityModels.Form", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity_Back.Models.SecurityModels.Permission", "Permission")
                        .WithMany("RolFormPermission")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity_Back.Models.Security.Rol", "Rol")
                        .WithMany("RolFormPermission")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");

                    b.Navigation("Permission");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Entity_Back.Models.SecurityModels.RolUser", b =>
                {
                    b.HasOne("Entity_Back.Models.Security.Rol", "Rol")
                        .WithMany("RolUser")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity_Back.Models.SecurityModels.User", "User")
                        .WithMany("RolUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity_Back.Models.SecurityModels.User", b =>
                {
                    b.HasOne("Entity_Back.Models.SecurityModels.Person", "Person")
                        .WithOne("User")
                        .HasForeignKey("Entity_Back.Models.SecurityModels.User", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Entity_Back.ScheduleHour", b =>
                {
                    b.HasOne("Entity_Back.Shedule", "Shedule")
                        .WithMany("ScheduleHours")
                        .HasForeignKey("SheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shedule");
                });

            modelBuilder.Entity("Entity_Back.Shedule", b =>
                {
                    b.HasOne("Entity_Back.ConsultingRoom", "ConsultingRoom")
                        .WithMany("Shedules")
                        .HasForeignKey("ConsultingRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity_Back.Doctor", "Doctor")
                        .WithMany("Shedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity_Back.TypeCitation", "TypeCitation")
                        .WithMany("Shedules")
                        .HasForeignKey("TypeCitationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConsultingRoom");

                    b.Navigation("Doctor");

                    b.Navigation("TypeCitation");
                });

            modelBuilder.Entity("Entity_Back.Citation", b =>
                {
                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Entity_Back.ConsultingRoom", b =>
                {
                    b.Navigation("Shedules");
                });

            modelBuilder.Entity("Entity_Back.Doctor", b =>
                {
                    b.Navigation("Shedules");
                });

            modelBuilder.Entity("Entity_Back.Models.HospitalModel.DocumentType", b =>
                {
                    b.Navigation("Person");
                });

            modelBuilder.Entity("Entity_Back.Models.HospitalModel.Eps", b =>
                {
                    b.Navigation("Person");
                });

            modelBuilder.Entity("Entity_Back.Models.Infrastructure.Branch", b =>
                {
                    b.Navigation("ConsultingRoom");
                });

            modelBuilder.Entity("Entity_Back.Models.Infrastructure.City", b =>
                {
                    b.Navigation("Institutions");
                });

            modelBuilder.Entity("Entity_Back.Models.Infrastructure.Departament", b =>
                {
                    b.Navigation("Citys");
                });

            modelBuilder.Entity("Entity_Back.Models.Infrastructure.Institution", b =>
                {
                    b.Navigation("Branchs");
                });

            modelBuilder.Entity("Entity_Back.Models.Security.Rol", b =>
                {
                    b.Navigation("RolFormPermission");

                    b.Navigation("RolUser");
                });

            modelBuilder.Entity("Entity_Back.Models.SecurityModels.Form", b =>
                {
                    b.Navigation("FormModule");
                });

            modelBuilder.Entity("Entity_Back.Models.SecurityModels.Module", b =>
                {
                    b.Navigation("FormModule");
                });

            modelBuilder.Entity("Entity_Back.Models.SecurityModels.Permission", b =>
                {
                    b.Navigation("RolFormPermission");
                });

            modelBuilder.Entity("Entity_Back.Models.SecurityModels.Person", b =>
                {
                    b.Navigation("Doctor");

                    b.Navigation("RelatedPerson");

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("Entity_Back.Models.SecurityModels.User", b =>
                {
                    b.Navigation("Citation");

                    b.Navigation("RolUser");
                });

            modelBuilder.Entity("Entity_Back.ScheduleHour", b =>
                {
                    b.Navigation("Citations");
                });

            modelBuilder.Entity("Entity_Back.Shedule", b =>
                {
                    b.Navigation("ScheduleHours");
                });

            modelBuilder.Entity("Entity_Back.TypeCitation", b =>
                {
                    b.Navigation("Shedules");
                });
#pragma warning restore 612, 618
        }
    }
}
