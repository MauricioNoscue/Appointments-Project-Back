pipeline {
    agent any

    environment {
        DOTNET_CLI_HOME = '/var/jenkins_home/.dotnet'
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE = '1'
        DOTNET_NOLOGO = '1'
    }

    stages {

        stage('Leer entorno desde .env ra√≠z') {
            steps {
                script {
                    def envValue = sh(script: "grep '^ENVIRONMENT=' .env | cut -d '=' -f2", returnStdout: true).trim()
                    if (envValue == '') {
                        error "No se encontr√≥ ENVIRONMENT en el archivo .env ra√≠z"
                    }

                    env.ENVIRONMENT = envValue
                    env.ENV_DIR = "devops/${env.ENVIRONMENT}"
                    env.COMPOSE_FILE = "${env.ENV_DIR}/docker-compose.yml"
                    env.ENV_FILE = "${env.ENV_DIR}/.env"

                    echo "Entorno detectado: ${env.ENVIRONMENT}"
                    echo "Archivo compose: ${env.COMPOSE_FILE}"
                    echo "Archivo de entorno: ${env.ENV_FILE}"
                }
            }
        }

        stage('Restaurar dependencias') {
            agent {
                docker {
                    image 'mcr.microsoft.com/dotnet/sdk:8.0'
                    args '-v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                sh '''
                    mkdir -p $DOTNET_CLI_HOME
                    chmod -R 777 $DOTNET_CLI_HOME
                    dotnet restore Web_back/Web_back.csproj
                '''
            }
        }

        stage('Compilar proyecto') {
            agent {
                docker { image 'mcr.microsoft.com/dotnet/sdk:8.0' }
            }
            steps {
                echo 'Compilando la soluci√≥n appointments-project-back...'
                sh 'dotnet build Web_back/Web_back.csproj --configuration Release'
            }
        }

        stage('Desplegar API') {
            steps {
                echo "Desplegando appointments-project-back para entorno: ${env.ENVIRONMENT}"
                sh """
                    echo "Limpiando contenedores antiguos..."
                    docker ps -a --filter "name=appointments-project-back-${env.ENVIRONMENT}" -q | xargs -r docker rm -f || true

                    docker compose -f ${env.COMPOSE_FILE} --env-file ${env.ENV_FILE} up -d --build
                """
            }
        }

        // üëá NUEVA ETAPA DENTRO DE 'stages'
        stage('Ejecutar migraciones EF') {
            steps {
                echo "üèóÔ∏è Aplicando migraciones EF en appointments-project-back-${env.ENVIRONMENT}..."

                sh """
                    echo "üïí Esperando a que SQL Server responda..."
                    for i in {1..30}; do
                        docker exec appointments-project-back-${env.ENVIRONMENT} bash -c '
                            /opt/mssql-tools18/bin/sqlcmd -S ${SQLSERVER_HOST},${SQLSERVER_PORT} \
                            -U ${SQLSERVER_USER} -P "${SQLSERVER_PASSWORD}" -Q "SELECT 1"
                        ' > /dev/null 2>&1 && break
                        echo "‚è≥ SQL a√∫n no responde, reintentando..."
                        sleep 5
                    done

                    docker exec appointments-project-back-${env.ENVIRONMENT} bash -c '
                        export ASPNETCORE_ENVIRONMENT=${ENVIRONMENT} &&
                        dotnet tool install --global dotnet-ef --version 8.0.0 &&
                        export PATH="$PATH:/root/.dotnet/tools" &&
                        dotnet ef database update \
                            --project Entity-Back/Entity-Back.csproj \
                            --startup-project Web_back/Web_back.csproj
                    '
                """
            }
        }
    } // üëà este cierra stages correctamente

    post {
        success {
            echo "‚úÖ Despliegue completado correctamente para ${env.ENVIRONMENT}"
        }
        failure {
            echo "‚ùå Error durante el despliegue en ${env.ENVIRONMENT}"
        }
    }
}
