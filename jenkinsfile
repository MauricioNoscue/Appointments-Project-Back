 pipeline {
    agent any

    environment {
        DOTNET_CLI_HOME = '/var/jenkins_home/.dotnet'
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE = '1'
        DOTNET_NOLOGO = '1'
        PROJECT_PATH = 'Web_back/Web_back.csproj'
    }

    stages {

        // =======================================================
        // 1Ô∏è‚É£ CHECKOUT
        // =======================================================
        stage('Checkout c√≥digo fuente') {
            steps {
                echo "üì• Clonando repositorio desde GitHub..."
                checkout scm
                sh 'ls -R devops || true'
            }
        }

        // =======================================================
        // 2Ô∏è‚É£ DETECTAR ENTORNO SEG√öN LA RAMA
        // =======================================================
        stage('Detectar entorno') {
            steps {
                script {
                    // Detectar la rama actual de forma robusta
                    def branch = env.BRANCH_NAME ?: env.GIT_BRANCH?.replaceFirst(/^origin\//, '') ?: 'develop'

                    // Asignar entorno seg√∫n la rama
                    switch (branch) {
                        case 'main':    env.ENVIRONMENT = 'prod';     break
                        case 'staging': env.ENVIRONMENT = 'staging';  break
                        case 'qa':      env.ENVIRONMENT = 'qa';       break
                        default:        env.ENVIRONMENT = 'develop';  break
                    }

                    // Definir rutas
                    env.ENV_DIR = "devops/${env.ENVIRONMENT}"
                    env.COMPOSE_FILE = "${env.ENV_DIR}/docker-compose.yml"
                    env.ENV_FILE = "${env.ENV_DIR}/.env"
                    env.DB_COMPOSE_FILE = "docker-compose.yml"



                    echo """
                    ‚úÖ Rama detectada: ${branch}
                    üåé Entorno asignado: ${env.ENVIRONMENT}
                    üìÑ Compose file (API): ${env.COMPOSE_FILE}
                    üìÅ Env file (API): ${env.ENV_FILE}
                    üóÑÔ∏è Compose file (DB): ${env.DB_COMPOSE_FILE}
                    """

                    if (!fileExists(env.COMPOSE_FILE)) {
                        error "‚ùå No se encontr√≥ ${env.COMPOSE_FILE}"
                    }
                }
            }
        }

        // =======================================================
        // 3Ô∏è‚É£ COMPILAR Y PUBLICAR .NET
        // =======================================================
        stage('Compilar .NET dentro de contenedor SDK') {
            steps {
                script {
                    docker.image('mcr.microsoft.com/dotnet/sdk:9.0')
                        .inside('-v /var/run/docker.sock:/var/run/docker.sock -u root:root') {
                            sh '''
                                echo "üîß Restaurando dependencias .NET..."
                                dotnet restore ${PROJECT_PATH}
                                dotnet build ${PROJECT_PATH} --configuration Release
                                dotnet publish ${PROJECT_PATH} -c Release -o ./publish
                            '''
                        }
                }
            }
        }

        // =======================================================
        // 4Ô∏è‚É£ CONSTRUIR IMAGEN DOCKER
        // =======================================================
        stage('Construir imagen Docker') {
            steps {
                sh """
                    echo "üê≥ Construyendo imagen Docker para Appointments-Project-Back (${env.ENVIRONMENT})"
                    docker build -t appointments-api-${env.ENVIRONMENT}:latest -f Web_back/Dockerfile .
                """
            }
        }

        // =======================================================
        // 5Ô∏è‚É£ PREPARAR RED Y BASES DE DATOS
        // =======================================================
        stage('Preparar red y base de datos') {
            steps {
                script {
                    sh """
                        echo "üåê Creando red externa compartida (si no existe)..."
                        docker network create appointments_network || true

                        echo "üóÑÔ∏è Levantando stack de bases de datos..."
                        docker compose -f ${env.DB_COMPOSE_FILE} up -d
                    """
                }
            }
        }

        // =======================================================
        // 6Ô∏è‚É£ DESPLEGAR API CON DOCKER COMPOSE
        // =======================================================
        stage('Desplegar citas API') {
            steps {
                sh """
                    echo "üöÄ Desplegando entorno: ${env.ENVIRONMENT}"
                    docker compose -f ${env.COMPOSE_FILE} --env-file ${env.ENV_FILE} up -d --build
                """
            }
        }
    }

    // =======================================================
    // üîö POST - RESULTADOS
    // =======================================================
    post {
        success {
            echo "üéâ Despliegue completado correctamente para ${env.ENVIRONMENT}"
        }
        failure {
            echo "üí• Error durante el despliegue en ${env.ENVIRONMENT}"
        }
        always {
            echo "üßπ Limpieza final del pipeline completada."
        }
    }
}
